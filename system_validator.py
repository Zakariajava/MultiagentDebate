"""
Sistema de Validaci√≥n Integral para Plataforma de Debates con Inteligencia Artificial.

Este m√≥dulo implementa un validador comprehensivo que verifica la correcta configuraci√≥n
y funcionamiento de todos los componentes del sistema de debates automatizados. Aplica
el patr√≥n Health Check y Strategy Pattern para realizar validaciones modulares y
escalables de diferentes subsistemas.

Arquitectura de Validaci√≥n:
    - Health Check Pattern: Verificaci√≥n sistem√°tica de componentes
    - Strategy Pattern: Diferentes estrategias de validaci√≥n por subsistema
    - Collector Pattern: Acumulaci√≥n estructurada de resultados
    - Fail-Fast Principle: Detecci√≥n temprana de errores cr√≠ticos

Subsistemas Validados:
    1. Dependencias e Importaciones (Import System)
    2. Variables de Entorno (Environment Configuration)
    3. Modelos de Lenguaje (LLM Connectivity)
    4. Sistema de B√∫squeda (Search Engine Integration)
    5. Componentes de Debate (Domain Logic Components)

Patrones de Dise√±o Implementados:
    - Health Check: Para verificaci√≥n de estado de componentes
    - Strategy: Para diferentes tipos de validaci√≥n
    - Template Method: Estructura consistente de tests
    - Collector: Para agregaci√≥n de resultados
    - Observer: Para reporting de progreso

Principios de Calidad de Software:
    - Defensive Programming: Validaci√≥n exhaustiva de precondiciones
    - Fail-Fast: Detecci√≥n temprana de errores de configuraci√≥n
    - Separation of Concerns: Validaci√≥n modular por responsabilidad
    - Single Responsibility: Cada m√©todo valida un aspecto espec√≠fico

Referencias T√©cnicas:
    - Clean Architecture: Validaci√≥n de capas de infraestructura
    - SOLID Principles: Aplicaci√≥n de SRP y OCP
    - Test-Driven Development: Principios de testing aplicados a validaci√≥n
    - Domain-Driven Design: Validaci√≥n centrada en el dominio de debates

M√©tricas de Calidad:
    - Code Coverage: Validaci√≥n de todos los componentes cr√≠ticos
    - Error Detection: Categorizaci√≥n de errores, warnings y √©xitos
    - Performance Monitoring: Medici√≥n de tiempos de validaci√≥n
    - Usability: Feedback claro y accionable para el usuario

Author: Sistema de Debates IA
Version: 1.0
License: Academic Use
Dependencies: src.config, src.utils, logging, datetime
"""

import sys
import os
from typing import List, Dict, Any, Tuple, Optional, Union
from datetime import datetime
import logging

# Configuraci√≥n del path del proyecto - Dependency Injection Pattern
# Permite importaciones relativas desde el directorio ra√≠z del proyecto
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importaciones del sistema - Layered Architecture
# Cada importaci√≥n representa una capa espec√≠fica del sistema
from src.config import Config, ConfigValidator, LogConfig
from src.utils.github_models import github_models
from src.utils.search import SearchSystem


class SystemValidator:
    """
    Validador integral del sistema de debates con arquitectura modular.
    
    Implementa el patr√≥n Health Check para verificar sistem√°ticamente el estado
    de todos los componentes del sistema antes de la ejecuci√≥n de debates.
    Utiliza el patr√≥n Collector para agregar resultados de validaci√≥n de manera
    estructurada y escalable.
    
    Attributes:
        errors (List[str]): Colecci√≥n de errores cr√≠ticos encontrados
        warnings (List[str]): Colecci√≥n de advertencias no cr√≠ticas
        successes (List[str]): Colecci√≥n de validaciones exitosas
        
    Design Patterns:
        - Health Check: Verificaci√≥n sistem√°tica de componentes
        - Collector: Agregaci√≥n estructurada de resultados
        - Strategy: Diferentes enfoques de validaci√≥n por subsistema
        - Template Method: Estructura consistente de validaci√≥n
        
    Architecture Benefits:
        - Modular Validation: Cada subsistema se valida independientemente
        - Scalable Design: F√°cil adici√≥n de nuevos tipos de validaci√≥n
        - Clear Reporting: Categorizaci√≥n clara de resultados
        - User-Friendly: Feedback accionable y espec√≠fico
        
    Quality Attributes:
        - Reliability: Detecci√≥n consistente de problemas
        - Maintainability: C√≥digo modular y bien estructurado
        - Usability: Mensajes claros y soluciones sugeridas
        - Performance: Validaci√≥n eficiente y r√°pida
    """
    
    def __init__(self) -> None:
        """
        Inicializa el validador con colectores vac√≠os para resultados.
        
        Implementa el patr√≥n Constructor con inicializaci√≥n de estado limpio,
        siguiendo el principio de Separation of Concerns donde cada instancia
        mantiene su propio estado de validaci√≥n.
        
        Postconditions:
            - self.errors est√° inicializado como lista vac√≠a
            - self.warnings est√° inicializado como lista vac√≠a  
            - self.successes est√° inicializado como lista vac√≠a
            
        Complexity:
            Tiempo: O(1) - Inicializaci√≥n constante
            Espacio: O(1) - Almacenamiento de tres listas vac√≠as
        """
        # Inicializaci√≥n de colectores - Collector Pattern
        self.errors: List[str] = []      # Errores cr√≠ticos que impiden ejecuci√≥n
        self.warnings: List[str] = []    # Advertencias que afectan rendimiento
        self.successes: List[str] = []   # Validaciones exitosas para confirmaci√≥n
        
    def print_header(self, title: str) -> None:
        """
        Renderiza un header visual para secciones de validaci√≥n.
        
        Implementa principios de User Interface Design para mejorar la legibilidad
        del output de validaci√≥n, aplicando Visual Hierarchy mediante separadores
        y formateo consistente.
        
        Args:
            title (str): T√≠tulo de la secci√≥n a mostrar
            
        Design Principles:
            - Visual Hierarchy: Separaci√≥n clara de secciones
            - Consistency: Formato est√°ndar para todos los headers
            - Readability: Uso de caracteres ASCII para compatibilidad
            
        Side Effects:
            Imprime contenido formateado en stdout
        """
        print("\n" + "="*60)  # Separador superior con longitud fija
        print(f"üîç {title}")   # T√≠tulo con emoji para identificaci√≥n visual
        print("="*60)         # Separador inferior matching

    def print_section(self, title: str) -> None:
        """
        Renderiza un subsection header para organizaci√≥n jer√°rquica.
        
        Complementa print_header() para crear una jerarqu√≠a visual de dos niveles,
        facilitando la navegaci√≥n y comprensi√≥n del output de validaci√≥n.
        
        Args:
            title (str): T√≠tulo de la subsecci√≥n
            
        Visual Design:
            - Shorter separators para jerarqu√≠a visual
            - Consistent spacing para ritmo de lectura
            - Clear demarcation entre subsecciones
            
        Side Effects:
            Imprime contenido formateado en stdout
        """
        print(f"\n{'='*20} {title} {'='*20}")

    def validate_environment(self) -> None:
        """
        Valida la configuraci√≥n de variables de entorno del sistema.
        
        Implementa el patr√≥n Specification para verificar que todas las variables
        de entorno requeridas est√©n configuradas correctamente. Utiliza el
        ConfigValidator existente para delegar la l√≥gica de validaci√≥n espec√≠fica.
        
        Validation Strategy:
            1. Delegaci√≥n a ConfigValidator para reglas de negocio
            2. Categorizaci√≥n de errores vs warnings
            3. Reporting estructurado de resultados
            4. Feedback accionable para correcci√≥n
            
        Business Rules Validated:
            - Variables de entorno requeridas presentes
            - Valores de configuraci√≥n dentro de l√≠mites v√°lidos
            - Tokens de API con formato correcto
            - Configuraci√≥n de modelos disponible
            
        Design Patterns:
            - Delegation: Uso de ConfigValidator para l√≥gica espec√≠fica
            - Specification: Validaci√≥n de reglas de negocio
            - Observer: Reporting de progreso y resultados
            
        Side Effects:
            - Imprime resultados de validaci√≥n
            - Actualiza self.errors, self.warnings, self.successes
        """
        self.print_section("VARIABLES DE ENTORNO")
        
        # Delegaci√≥n a ConfigValidator - Delegation Pattern
        validation_report = ConfigValidator.get_validation_report()
        
        # Procesamiento de errores de entorno - Error Handling
        env_errors = validation_report["environment_errors"]
        if env_errors:
            print("‚ùå ERRORES EN CONFIGURACI√ìN:")
            for error in env_errors:
                print(f"   - {error}")
                self.errors.append(f"Environment: {error}")
        else:
            print("‚úÖ Todas las variables de entorno est√°n configuradas")
            self.successes.append("Variables de entorno configuradas")
        
        # Procesamiento de advertencias de l√≠mites - Warning Handling
        limits_warnings = validation_report["limits_warnings"]
        if limits_warnings:
            print("\n‚ö†Ô∏è ADVERTENCIAS DE L√çMITES:")
            for warning in limits_warnings:
                print(f"   - {warning}")
                self.warnings.append(f"Limits: {warning}")
        else:
            print("‚úÖ L√≠mites de configuraci√≥n son razonables")
            self.successes.append("L√≠mites apropiados")

    def validate_models(self) -> None:
        """
        Valida la conectividad y funcionalidad de modelos de lenguaje.
        
        Implementa el patr√≥n Circuit Breaker para testing de conexiones externas,
        verificando tanto la conectividad general como la funcionalidad espec√≠fica
        de cada tipo de modelo utilizado en el sistema.
        
        Model Testing Strategy:
            1. Conectividad general con GitHub Models
            2. Test funcional de Supervisor PRO model
            3. Test funcional de Supervisor CONTRA model  
            4. Test funcional de Agent models
            5. Validation de respuestas esperadas
            
        Design Patterns:
            - Circuit Breaker: Para manejo de servicios externos
            - Template Method: Estructura consistente de tests
            - Strategy: Diferentes enfoques por tipo de modelo
            
        Error Handling:
            - Graceful degradation en caso de fallas
            - Categorizaci√≥n de errores por tipo de modelo
            - Feedback espec√≠fico para troubleshooting
            
        Performance Considerations:
            - Tests ligeros para minimizar latencia
            - Timeouts apropiados para servicios externos
            - Retry logic impl√≠cito en github_models
            
        Side Effects:
            - Realiza llamadas a APIs externas
            - Actualiza colectores de resultados
            - Imprime progreso y resultados
        """
        self.print_section("MODELOS LLM")
        
        try:
            # Test de conectividad general - Circuit Breaker Pattern
            if github_models.test_connection():
                print("‚úÖ Conexi√≥n con GitHub Models exitosa")
                self.successes.append("GitHub Models conectado")
                
                # Importaci√≥n de factory functions - Factory Pattern
                from src.utils.github_models import get_supervisor_pro_model, get_supervisor_contra_model, get_agent_model
                
                # Validation de Supervisor PRO - Template Method
                try:
                    model_pro = get_supervisor_pro_model(temperature=0.1)
                    response = model_pro.invoke("Di solo 'OK' si funcionas")
                    # Validation de respuesta esperada - Specification Pattern
                    if "OK" in response.content.upper():
                        print("‚úÖ Modelo Supervisor PRO funcionando")
                        self.successes.append("Supervisor PRO operativo")
                    else:
                        print("‚ö†Ô∏è Supervisor PRO responde pero de manera inesperada")
                        self.warnings.append("Supervisor PRO respuesta inesperada")
                except Exception as e:
                    print(f"‚ùå Error en Supervisor PRO: {e}")
                    self.errors.append(f"Supervisor PRO: {e}")
                
                # Validation de Supervisor CONTRA - Template Method (variante)
                try:
                    model_contra = get_supervisor_contra_model(temperature=0.1)
                    response = model_contra.invoke("Di solo 'OK' si funcionas")
                    # Validation de respuesta esperada - Specification Pattern
                    if "OK" in response.content.upper():
                        print("‚úÖ Modelo Supervisor CONTRA funcionando")
                        self.successes.append("Supervisor CONTRA operativo")
                    else:
                        print("‚ö†Ô∏è Supervisor CONTRA responde pero de manera inesperada")
                        self.warnings.append("Supervisor CONTRA respuesta inesperada")
                except Exception as e:
                    print(f"‚ùå Error en Supervisor CONTRA: {e}")
                    self.errors.append(f"Supervisor CONTRA: {e}")
                
                # Validation de modelos de Agentes - Template Method (variante)
                try:
                    agent_model = get_agent_model(temperature=0.1)
                    response = agent_model.invoke("Di solo 'OK' si funcionas")
                    # Validation de respuesta esperada - Specification Pattern
                    if "OK" in response.content.upper():
                        print("‚úÖ Modelo de Agentes funcionando")
                        self.successes.append("Modelo de Agentes operativo")
                    else:
                        print("‚ö†Ô∏è Modelo de Agentes responde pero de manera inesperada")
                        self.warnings.append("Modelo de Agentes respuesta inesperada")
                except Exception as e:
                    print(f"‚ùå Error en Modelo de Agentes: {e}")
                    self.errors.append(f"Modelo de Agentes: {e}")
                    
            else:
                print("‚ùå No se puede conectar con GitHub Models")
                self.errors.append("GitHub Models no disponible")
                
        except Exception as e:
            # Global exception handling - Defensive Programming
            print(f"‚ùå Error general en modelos: {e}")
            self.errors.append(f"Modelos generales: {e}")

    def validate_search_system(self) -> None:
        """
        Valida la configuraci√≥n y funcionalidad del sistema de b√∫squeda.
        
        Implementa validation estrat√©gica del sistema de b√∫squeda, verificando
        tanto la configuraci√≥n como la funcionalidad operativa. Proporciona
        guidance espec√≠fico para resoluci√≥n de problemas de configuraci√≥n.
        
        Search System Validation Strategy:
            1. Verificaci√≥n de estado de configuraci√≥n
            2. Test de funcionalidad b√°sica de b√∫squeda
            3. Validation de integraci√≥n con APIs externas
            4. Guidance para troubleshooting
            
        Validation Layers:
            - Configuration Layer: API keys y dependencias
            - Integration Layer: Conectividad con servicios
            - Functional Layer: Ejecuci√≥n de b√∫squedas reales
            - Performance Layer: Respuesta y calidad de resultados
            
        Design Patterns:
            - Strategy: Diferentes enfoques de validation
            - Facade: Interfaz simplificada para validation
            - Observer: Reporting detallado de estado
            
        User Experience:
            - Clear status reporting con s√≠mbolos visuales
            - Actionable guidance para configuraci√≥n
            - Differentiated feedback para diferentes problemas
            
        Side Effects:
            - Puede realizar b√∫squedas reales para testing
            - Actualiza colectores de resultados
            - Proporciona guidance de configuraci√≥n
        """
        self.print_section("SISTEMA DE B√öSQUEDA")
        
        try:
            # Instanciaci√≥n del sistema de b√∫squeda - Factory Pattern
            search_system = SearchSystem()
            status = search_system.get_status()
            
            # Display detallado de estado - Observer Pattern
            print(f"üìä Estado del sistema de b√∫squeda:")
            for key, value in status.items():
                symbol = "‚úÖ" if value else "‚ùå"  # Visual feedback mapping
                print(f"   {symbol} {key}: {value}")
            
            # Conditional functional testing - Strategy Pattern
            if status["can_search"]:
                # Test de b√∫squeda real - Integration Testing
                try:
                    results = search_system.search("test python programming", max_results=1)
                    if results:
                        print("‚úÖ B√∫squeda de prueba exitosa")
                        self.successes.append("Sistema de b√∫squeda operativo")
                    else:
                        print("‚ö†Ô∏è B√∫squeda funciona pero no devolvi√≥ resultados")
                        self.warnings.append("B√∫squeda sin resultados")
                except Exception as e:
                    print(f"‚ùå Error en b√∫squeda de prueba: {e}")
                    self.errors.append(f"B√∫squeda: {e}")
            else:
                # Configuration guidance - Help System Pattern
                print("‚ùå Sistema de b√∫squeda no puede funcionar")
                self.errors.append("Sistema de b√∫squeda no configurado")
                print("üí° Para habilitar b√∫squedas:")
                print("   1. Obt√©n API key en: https://tavily.com/")
                print("   2. Agr√©gala a .env: TAVILY_API_KEY=tu_key_aqui")
                
        except Exception as e:
            # Global exception handling con contexto espec√≠fico
            print(f"‚ùå Error general en sistema de b√∫squeda: {e}")
            self.errors.append(f"B√∫squeda general: {e}")

    def validate_debate_components(self) -> None:
        """
        Valida la funcionalidad de componentes espec√≠ficos del dominio de debates.
        
        Implementa validation de componentes core del sistema, verificando que
        los elementos fundamentales del dominio de debates puedan ser instanciados
        y configurados correctamente.
        
        Component Testing Strategy:
            1. SlaveAgent instantiation y configuraci√≥n
            2. SupervisorAgent creation y setup
            3. DebateOrchestrator initialization
            4. DebateConfig validation
            
        Domain Validation:
            - Core business objects creation
            - Configuration object validity
            - Integration between components
            - System readiness for debates
            
        Design Patterns:
            - Factory: Para creation de objetos de dominio
            - Builder: Para configuraci√≥n compleja
            - Template Method: Estructura consistente de tests
            
        Quality Assurance:
            - Unit-level testing de componentes
            - Integration readiness verification
            - Configuration validation
            - Error detection temprana
            
        Architecture Validation:
            - Layered architecture integrity
            - Dependency injection functionality
            - Component lifecycle management
            - Interface contract compliance
            
        Side Effects:
            - Instancia objetos del dominio para testing
            - Actualiza colectores de resultados
            - Valida configuraci√≥n de clases
        """
        self.print_section("COMPONENTES DEL DEBATE")
        
        try:
            # Validation de SlaveAgent - Domain Object Testing
            from src.agents.SlaveAgent import SlaveAgent
            from src.config import AgentRole
            
            # Test de instanciaci√≥n con configuraci√≥n m√≠nima
            test_agent = SlaveAgent(role=AgentRole.CIENTIFICO, team="pro")
            print("‚úÖ SlaveAgent se puede crear")
            self.successes.append("SlaveAgent funcional")
            
            # Validation de SupervisorAgent - Aggregate Root Testing
            from src.agents.SupervisorAgent import SupervisorAgent
            
            # Test de instanciaci√≥n con dependencias complejas
            test_supervisor = SupervisorAgent(
                team="pro",
                position="Test position",
                supervisor_id="test_supervisor"
            )
            print("‚úÖ SupervisorAgent se puede crear")
            self.successes.append("SupervisorAgent funcional")
            
            # Validation de DebateOrchestrator - Application Service Testing
            from src.agents.debate_graph import DebateOrchestrator, DebateConfig
            
            # Test de instanciaci√≥n de orquestador principal
            orchestrator = DebateOrchestrator()
            print("‚úÖ DebateOrchestrator se puede crear")
            self.successes.append("DebateOrchestrator funcional")
            
            # Validation de DebateConfig - Value Object Testing
            config = DebateConfig(
                topic="Test topic",
                pro_position="Test pro position",
                contra_position="Test contra position",
                max_rounds=1
            )
            print("‚úÖ DebateConfig se puede crear")
            self.successes.append("DebateConfig funcional")
            
        except Exception as e:
            # Domain-specific error handling
            print(f"‚ùå Error en componentes del debate: {e}")
            self.errors.append(f"Componentes del debate: {e}")

    def validate_imports(self) -> None:
        """
        Valida la disponibilidad de todas las dependencias cr√≠ticas del sistema.
        
        Implementa dependency checking comprehensivo para asegurar que todas
        las bibliotecas externas requeridas est√©n instaladas y sean importables.
        Utiliza el patr√≥n Strategy para different tipos de dependencias.
        
        Dependency Categories:
            - Core Framework Dependencies: LangGraph, LangChain
            - AI/ML Dependencies: OpenAI, model libraries
            - External API Dependencies: Tavily para b√∫squedas
            - Standard Library Dependencies: datetime, dataclasses, etc.
            - Utility Dependencies: python-dotenv, logging
            
        Testing Strategy:
            1. Importaci√≥n din√°mica de cada dependencia
            2. Categorizaci√≥n de dependencias cr√≠ticas vs opcionales
            3. Reporting detallado de status de cada dependencia
            4. Guidance para instalaci√≥n de dependencias faltantes
            
        Design Patterns:
            - Strategy: Diferentes enfoques por tipo de dependencia
            - Iterator: Procesamiento sistem√°tico de lista de dependencias
            - Observer: Reporting detallado de progreso
            
        Error Handling:
            - ImportError catching espec√≠fico
            - Graceful handling de dependencias opcionales
            - Clear guidance para resoluci√≥n de problemas
            
        Complexity:
            Tiempo: O(n) donde n es el n√∫mero de dependencias
            Espacio: O(1) - Solo almacenamiento de resultado actual
        """
        self.print_section("DEPENDENCIAS E IMPORTACIONES")
        
        # Definici√≥n de dependencias cr√≠ticas - Strategy Pattern
        # Cada tupla define (module_name, display_name) para testing
        required_imports: List[Tuple[str, str]] = [
            ("langgraph", "LangGraph"),        # Core framework para orquestaci√≥n
            ("langchain", "LangChain"),        # Framework base para LLM
            ("openai", "OpenAI"),              # Cliente para modelos OpenAI
            ("tavily", "Tavily"),              # Cliente para b√∫squedas web
            ("dotenv", "python-dotenv"),       # Manejo de variables de entorno
            ("datetime", "datetime"),          # Manejo de fechas y timestamps
            ("dataclasses", "dataclasses"),   # Data structures para configuraci√≥n
            ("enum", "enum"),                  # Enumeraciones para tipos seguros
            ("logging", "logging")             # Sistema de logging
        ]
        
        # Iteraci√≥n de validation de dependencias - Iterator Pattern
        for module, name in required_imports:
            try:
                # Dynamic import testing - Strategy Pattern
                __import__(module)
                print(f"‚úÖ {name} importado correctamente")
                self.successes.append(f"{name} disponible")
            except ImportError:
                # Dependency missing handling - Error Recovery
                print(f"‚ùå {name} no est√° instalado")
                self.errors.append(f"{name} faltante")

    def run_full_validation(self) -> bool:
        """
        Ejecuta el proceso completo de validaci√≥n del sistema.
        
        Implementa el patr√≥n Template Method para coordinar todas las validaciones
        espec√≠ficas en una secuencia l√≥gica y coherente. Proporciona timing
        information y resumen comprehensivo de resultados.
        
        Validation Sequence:
            1. Dependencies and imports validation
            2. Environment configuration validation
            3. LLM models connectivity validation
            4. Search system functionality validation
            5. Domain components validation
            6. Results aggregation and reporting
            
        Returns:
            bool: True si el sistema est√° listo para debates, False en caso contrario
            
        Decision Logic:
            - Errores cr√≠ticos -> Sistema no listo (False)
            - Solo warnings -> Sistema listo con recomendaciones (True)
            - Sin errores ni warnings -> Sistema completamente listo (True)
            
        Design Patterns:
            - Template Method: Secuencia fija con pasos variables
            - Strategy: Diferentes tipos de validaci√≥n
            - Observer: Reporting detallado de progreso y resultados
            
        Performance Monitoring:
            - Timing de validaci√≥n completa
            - Conteo de resultados por categor√≠a
            - Reporting de m√©tricas de calidad
            
        User Experience:
            - Progress indication durante validaci√≥n
            - Clear categorization de resultados
            - Actionable recommendations
            - Next steps guidance
            
        Quality Metrics:
            - Error count y categorization
            - Warning count y impact assessment  
            - Success rate y component readiness
            - Overall system health score
        """
        self.print_header("VALIDACI√ìN COMPLETA DEL SISTEMA DE DEBATES")
        
        # Performance monitoring - Timing Pattern
        start_time = datetime.now()
        
        print("üéØ Validando que el sistema est√© listo para debates reales...")
        
        # Ejecuci√≥n secuencial de validaciones - Template Method Pattern
        # Orden espec√≠fico para dependencies y logical flow
        self.validate_imports()           # 1. Base dependencies first
        self.validate_environment()       # 2. Configuration after dependencies
        self.validate_models()            # 3. External services after config
        self.validate_search_system()     # 4. Additional services
        self.validate_debate_components() # 5. Domain components last
        
        # Performance measurement - Metrics Collection
        end_time = datetime.now()
        duration = end_time - start_time
        
        # Results aggregation y reporting - Observer Pattern
        self.print_section("RESUMEN DE VALIDACI√ìN")
        
        print(f"‚è±Ô∏è Validaci√≥n completada en: {duration}")
        print(f"‚úÖ √âxitos: {len(self.successes)}")
        print(f"‚ö†Ô∏è Advertencias: {len(self.warnings)}")
        print(f"‚ùå Errores: {len(self.errors)}")
        
        # Decision logic basada en results - Strategy Pattern
        if self.errors:
            # Critical errors present - System not ready
            print("\n‚ùå ERRORES CR√çTICOS ENCONTRADOS:")
            for i, error in enumerate(self.errors, 1):
                print(f"   {i}. {error}")
            print("\nüîß ACCI√ìN REQUERIDA: Corregir errores antes de ejecutar debates")
            return False
        
        elif self.warnings:
            # Warnings present but no critical errors - System ready with caveats
            print("\n‚ö†Ô∏è ADVERTENCIAS ENCONTRADAS:")
            for i, warning in enumerate(self.warnings, 1):
                print(f"   {i}. {warning}")
            print("\nüí° RECOMENDACI√ìN: Revisar advertencias para mejor rendimiento")
            return True
        
        else:
            # No errors or warnings - System fully ready
            print("\nüéâ ¬°SISTEMA COMPLETAMENTE LISTO!")
            print("‚úÖ Todos los componentes funcionan correctamente")
            print("üöÄ Puedes ejecutar debates sin problemas")
            return True

    def get_system_info(self) -> None:
        """
        Muestra informaci√≥n detallada de la configuraci√≥n actual del sistema.
        
        Implementa el patr√≥n Information Display para proporcionar una vista
        comprehensiva del estado de configuraci√≥n del sistema. √ötil para
        debugging y verificaci√≥n de configuraci√≥n.
        
        Information Categories:
            - Core Configuration: L√≠mites y par√°metros principales
            - Environment Configuration: Settings espec√≠ficos del ambiente
            - Operational Parameters: Configuraci√≥n de runtime
            - Debug Settings: Configuraci√≥n de desarrollo
            
        Display Strategy:
            1. Configuration loading y verification
            2. Structured information presentation
            3. Environment-specific settings
            4. Hierarchical information organization
            
        Design Patterns:
            - Information Expert: Config object knows its own state
            - Observer: Structured reporting of system state
            - Template Method: Consistent information display
            
        Data Sources:
            - Config class methods para core settings
            - Environment configuration para context-specific settings
            - Runtime parameters para operational state
            
        User Value:
            - System transparency para troubleshooting
            - Configuration verification para admins
            - Documentation de current state
            - Baseline establishment para comparisons
        """
        self.print_section("INFORMACI√ìN DEL SISTEMA")
        
        # Asegurar que la configuraci√≥n est√© cargada - Lazy Loading
        Config.ensure_loaded()
        
        # Core configuration display - Information Expert Pattern
        print(f"üîß Configuraci√≥n actual:")
        print(f"   - MAX_ROUNDS: {Config.MAX_ROUNDS()}")                    # L√≠mite de rondas de debate
        print(f"   - AGENTS_PER_TEAM: {Config.AGENTS_PER_TEAM()}")          # Agentes por equipo
        print(f"   - MAX_FRAGMENTS_PER_AGENT: {Config.MAX_FRAGMENTS_PER_AGENT}")  # L√≠mite de evidencia
        print(f"   - MAX_QUERIES_PER_AGENT: {Config.MAX_QUERIES_PER_AGENT}")     # L√≠mite de b√∫squedas
        print(f"   - MIN_FRAGMENT_SCORE: {Config.MIN_FRAGMENT_SCORE}")           # Umbral de calidad
        print(f"   - DEBUG_MODE: {Config.DEBUG_MODE()}")                     # Estado de debug
        
        # Environment-specific configuration - Context Awareness
        env_config = Config.get_environment_config()
        print(f"\nüåç Configuraci√≥n de ambiente:")
        for key, value in env_config.items():
            print(f"   - {key}: {value}")


def main() -> bool:
    """
    Funci√≥n principal para ejecutar el proceso completo de validaci√≥n.
    
    Implementa el patr√≥n Main Controller para coordinar el flujo principal
    de validaci√≥n del sistema, proporcionando una interfaz simple y clara
    para ejecutar todas las verificaciones necesarias.
    
    Execution Flow:
        1. Instanciaci√≥n del validador
        2. Display de informaci√≥n del sistema
        3. Ejecuci√≥n de validaci√≥n completa
        4. Interpretaci√≥n de resultados
        5. Guidance para pr√≥ximos pasos
        
    Returns:
        bool: True si el sistema est√° listo, False si necesita configuraci√≥n
        
    Design Patterns:
        - Main Controller: Coordinaci√≥n de flujo principal
        - Facade: Interfaz simplificada para validaci√≥n completa
        - Template Method: Secuencia est√°ndar de operaciones
        
    User Experience:
        - Clear indication de status del sistema
        - Actionable next steps basados en resultados
        - Different paths para success vs failure scenarios
        
    Error Handling:
        - Graceful handling de validation failures
        - Clear communication de remediation steps
        - User-friendly messaging
        
    Side Effects:
        - Imprime informaci√≥n comprehensiva en stdout
        - Puede realizar llamadas a servicios externos
        - Timing de execution para performance awareness
    """
    # Instanciaci√≥n del validador - Factory Pattern
    validator = SystemValidator()
    
    # Display de informaci√≥n del sistema - Information Pattern
    validator.get_system_info()
    
    # Ejecuci√≥n de validaci√≥n completa - Template Method
    success = validator.run_full_validation()
    
    # Conditional guidance basada en resultados - Strategy Pattern
    if success:
        # Success path - Sistema listo para uso
        print("\nüé≠ LISTO PARA DEBATES!")
        print("üìù Puedes ejecutar:")
        print("   python test_real_debate_only.py")
    else:
        # Failure path - Sistema necesita configuraci√≥n
        print("\nüõ†Ô∏è SISTEMA NECESITA CONFIGURACI√ìN")
        print("üìñ Revisa la documentaci√≥n y corrige los errores")
    
    return success


# Entry Point Pattern - Ejecuci√≥n condicional
if __name__ == "__main__":
    """
    Entry point para ejecuci√≥n standalone del validador.
    
    Implementa el patr√≥n Entry Point est√°ndar de Python, proporcionando
    una interfaz de l√≠nea de comandos para el sistema de validaci√≥n.
    
    Execution Context:
        - Direct execution: Ejecuta validaci√≥n completa con UI
        - Import context: No execution (library mode)
        
    User Interface:
        - Automated validation sequence
        - Interactive pause para review de resultados
        - Clear termination con user acknowledgment
        
    Best Practices:
        - Standard Python idiom para executable modules
        - Clear separation entre library y application code
        - User-friendly interaction patterns
    """
    main()
    input("\nüëã Presiona Enter para salir...")
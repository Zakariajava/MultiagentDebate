"""
Sistema de b√∫squeda REAL para el debate.

Este m√≥dulo implementa un sistema de b√∫squeda de informaci√≥n para el sistema de debates,
utilizando la API de Tavily para realizar consultas en tiempo real. Incluye funcionalidades
de cach√© para optimizar el rendimiento y evitar b√∫squedas repetidas, as√≠ como un manejo
robusto de errores y configuraci√≥n.

El sistema est√° dise√±ado para trabajar exclusivamente con b√∫squedas reales en internet,
obteniendo informaci√≥n actualizada y relevante para los debates.
"""
import os
import json
import hashlib
from typing import List, Dict, Optional, Any
from datetime import datetime
import logging
from dotenv import load_dotenv

# Importar Tavily con manejo de dependencia opcional
try:
    from tavily import TavilyClient
    TAVILY_AVAILABLE = True
except ImportError:
    TAVILY_AVAILABLE = False

# Cargar variables de entorno y configurar logger
load_dotenv()
logger = logging.getLogger(__name__)

class SearchResult:
    """
    Clase que estructura y estandariza los resultados de b√∫squeda.
    
    Encapsula toda la informaci√≥n relevante de un resultado de b√∫squeda
    incluyendo t√≠tulo, contenido, URL, fuente, fecha y puntuaci√≥n.
    
    Attributes:
        title (str): T√≠tulo del resultado de b√∫squeda.
        content (str): Contenido o extracto del resultado.
        url (str): URL completa del resultado.
        source (str): Nombre de la fuente o dominio.
        date (datetime): Fecha de publicaci√≥n o recuperaci√≥n.
        score (float): Puntuaci√≥n de relevancia (0.0-1.0).
    """
    def __init__(self, title: str, content: str, url: str, source: str, 
                 date: Optional[datetime] = None, score: float = 0.0):
        """
        Inicializa un nuevo resultado de b√∫squeda.
        
        Args:
            title: T√≠tulo del resultado.
            content: Contenido o extracto del texto.
            url: URL completa del recurso.
            source: Nombre de la fuente o dominio.
            date: Fecha de publicaci√≥n o recuperaci√≥n (opcional).
            score: Puntuaci√≥n de relevancia entre 0.0 y 1.0.
        """
        self.title = title
        self.content = content
        self.url = url
        self.source = source
        self.date = date or datetime.now()
        self.score = score
        
    def to_dict(self) -> Dict[str, Any]:
        """
        Convierte el resultado a un diccionario serializable.
        
        √ötil para almacenamiento, cach√© o transmisi√≥n de datos.
        
        Returns:
            Dict[str, Any]: Representaci√≥n del resultado como diccionario.
        """
        return {
            "title": self.title,
            "content": self.content,
            "url": self.url,
            "source": self.source,
            "date": self.date.isoformat() if self.date else None,
            "score": self.score
        }

class SearchError(Exception):
    """
    Excepci√≥n personalizada para errores de b√∫squeda.
    
    Proporciona informaci√≥n espec√≠fica sobre problemas durante
    las operaciones de b√∫squeda.
    """
    pass

class SearchSystem:
    """
    Sistema de b√∫squeda que utiliza Tavily para obtener informaci√≥n en tiempo real.
    
    Implementa funcionalidades para realizar b√∫squedas web con diferentes enfoques
    (general, acad√©mico, econ√≥mico, noticias), adem√°s de manejar cach√© para optimizar
    rendimiento y evitar b√∫squedas duplicadas.
    
    Attributes:
        tavily_client: Cliente de la API de Tavily.
        cache: Diccionario que almacena resultados previos.
        is_configured: Indica si el sistema est√° correctamente configurado.
    """
    
    def __init__(self):
        """
        Inicializa el sistema de b√∫squeda y verifica la configuraci√≥n.
        
        Comprueba la disponibilidad de Tavily y la presencia de la API key,
        inicializando el cliente si todas las condiciones son favorables.
        """
        self.tavily_client = None
        self.cache = {}  # Cache para evitar b√∫squedas repetidas
        self.is_configured = False
        
        # Verificar disponibilidad de Tavily como dependencia
        if not TAVILY_AVAILABLE:
            logger.error("‚ùå Tavily no est√° instalado. Ejecuta: pip install tavily-python")
            return
            
        # Verificar presencia y validez de la API key
        tavily_key = os.getenv("TAVILY_API_KEY")
        if not tavily_key or tavily_key == "your_tavily_api_key_here":
            logger.warning("‚ö†Ô∏è TAVILY_API_KEY no configurada en .env")
            logger.warning("   Obt√©n una en: https://tavily.com/")
            return
            
        # Inicializar cliente de Tavily
        try:
            self.tavily_client = TavilyClient(api_key=tavily_key)
            self.is_configured = True
            logger.info("‚úÖ Sistema de b√∫squeda Tavily configurado correctamente")
        except Exception as e:
            logger.error(f"‚ùå Error al inicializar Tavily: {e}")
                
    def search(self, query: str, source_type: str = "general", 
               max_results: int = 5) -> List[SearchResult]:
        """
        Busca informaci√≥n usando la API de Tavily.
        
        Realiza b√∫squedas en tiempo real seg√∫n el tipo de fuente especificado,
        adaptando la consulta para obtener resultados m√°s relevantes. Implementa
        cach√© para optimizar consultas repetidas.
        
        Args:
            query: Consulta o t√©rmino de b√∫squeda.
            source_type: Tipo de fuente a priorizar ("general", "academic", "economic", "news").
            max_results: N√∫mero m√°ximo de resultados a devolver.
            
        Returns:
            Lista de objetos SearchResult con los resultados encontrados.
            
        Raises:
            SearchError: Si el sistema no est√° configurado o hay problemas en la b√∫squeda.
        """
        # Verificar que el sistema est√° correctamente configurado
        if not self.is_configured:
            raise SearchError(
                "Sistema de b√∫squeda no configurado. "
                "Necesitas:\n"
                "1. Instalar tavily: pip install tavily-python\n"
                "2. Configurar TAVILY_API_KEY en .env\n"
                "3. Obtener API key gratis en: https://tavily.com/"
            )
        
        # Verificar si la b√∫squeda ya est√° en cach√©
        cache_key = f"{query}_{source_type}_{max_results}"
        if cache_key in self.cache:
            logger.info(f"üì¶ Usando cache para: {query}")
            return self.cache[cache_key]
        
        # Realizar b√∫squeda en tiempo real
        try:
            logger.info(f"üîç Buscando con Tavily: {query}")
            
            # Configurar par√°metros seg√∫n el tipo de b√∫squeda
            search_params = {
                "query": query,
                "max_results": max_results
            }
            
            # Adaptar la consulta seg√∫n el tipo de fuente requerido
            if source_type == "academic":
                search_params["query"] = f"scientific study research {query}"
            elif source_type == "economic":
                search_params["query"] = f"economic impact analysis {query}"
            elif source_type == "news":
                search_params["query"] = f"latest news {query}"
                
            # Ejecutar b√∫squeda a trav√©s de la API
            tavily_results = self.tavily_client.search(**search_params)
            
            # Procesar y estructurar los resultados obtenidos
            results = []
            for r in tavily_results.get('results', []):
                # Extraer fecha de publicaci√≥n si est√° disponible
                date = None
                if 'published_date' in r:
                    try:
                        date = datetime.fromisoformat(r['published_date'])
                    except:
                        date = datetime.now()
                
                # Crear objeto SearchResult con los datos del resultado
                results.append(SearchResult(
                    title=r.get('title', 'Sin t√≠tulo'),
                    content=r.get('content', r.get('snippet', '')),
                    url=r.get('url', ''),
                    source=self._extract_source_from_url(r.get('url', '')),
                    date=date,
                    score=r.get('score', 0.8)
                ))
            
            # Verificar si se encontraron resultados
            if not results:
                logger.warning(f"‚ö†Ô∏è No se encontraron resultados para: {query}")
                return []
            
            # Guardar resultados en cach√© para futuras consultas
            self.cache[cache_key] = results
            logger.info(f"‚úÖ Encontrados {len(results)} resultados")
            
            return results
            
        except Exception as e:
            error_msg = f"Error al buscar '{query}': {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            raise SearchError(error_msg)
    
    def _extract_source_from_url(self, url: str) -> str:
        """
        Extrae el nombre de la fuente desde la URL.
        
        Analiza la URL para obtener el dominio principal y lo formatea
        como nombre de fuente legible.
        
        Args:
            url: URL completa del recurso.
            
        Returns:
            Nombre de la fuente extra√≠do y formateado.
        """
        if not url:
            return "Fuente desconocida"
            
        # Extraer y formatear el dominio
        try:
            from urllib.parse import urlparse
            domain = urlparse(url).netloc
            # Limpiar www. y extraer dominio principal
            domain = domain.replace('www.', '')
            domain = domain.split('.')[0]
            return domain.capitalize()
        except:
            return "Web"
    
    def test_connection(self) -> bool:
        """
        Prueba si la conexi√≥n con Tavily funciona correctamente.
        
        Realiza una b√∫squeda de prueba simple para verificar la 
        conectividad y configuraci√≥n del sistema.
        
        Returns:
            True si la conexi√≥n funciona, False en caso contrario.
        """
        if not self.is_configured:
            return False
            
        try:
            # Realizar una b√∫squeda simple de prueba
            results = self.search("test", max_results=1)
            return True
        except:
            return False
    
    def clear_cache(self):
        """
        Limpia el cach√© de b√∫squedas.
        
        Elimina todos los resultados almacenados en cach√© para 
        forzar nuevas b√∫squedas en tiempo real.
        """
        self.cache.clear()
        logger.info("üßπ Cache limpiado")
    
    def get_status(self) -> Dict[str, Any]:
        """
        Devuelve el estado actual del sistema de b√∫squeda.
        
        Proporciona informaci√≥n sobre la configuraci√≥n, disponibilidad
        y capacidades del sistema.
        
        Returns:
            Diccionario con informaci√≥n de estado del sistema.
        """
        return {
            "configured": self.is_configured,          # Si est√° configurado correctamente
            "tavily_available": TAVILY_AVAILABLE,      # Si la biblioteca est√° instalada
            "api_key_set": bool(os.getenv("TAVILY_API_KEY")),  # Si hay API key configurada
            "cache_size": len(self.cache),             # Tama√±o del cach√© actual
            "can_search": self.is_configured and TAVILY_AVAILABLE  # Si puede realizar b√∫squedas
        }

# Funci√≥n de prueba aut√≥noma
def test_search_system():
    """
    Prueba el sistema de b√∫squeda con consultas reales.
    
    Esta funci√≥n ejecuta una serie de b√∫squedas de prueba para
    verificar el funcionamiento del sistema y mostrar sus capacidades.
    √ötil para depuraci√≥n y demostraci√≥n del sistema.
    """
    print("="*60)
    print("PRUEBA DEL SISTEMA DE B√öSQUEDA REAL")
    print("="*60)
    
    # Inicializar sistema de b√∫squeda
    search = SearchSystem()
    
    # Mostrar estado actual del sistema
    status = search.get_status()
    print("\nüìä Estado del sistema:")
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    # Verificar si el sistema puede realizar b√∫squedas
    if not status["can_search"]:
        print("\n‚ùå El sistema no puede realizar b√∫squedas")
        print("\nPara habilitar las b√∫squedas:")
        print("1. Obt√©n una API key gratis en: https://tavily.com/")
        print("2. Agr√©gala a tu archivo .env:")
        print("   TAVILY_API_KEY=tu_api_key_aqui")
        return
    
    # Consultas de prueba para diferentes dominios
    test_queries = [
        "beneficios cognitivos del caf√©",
        "impacto econ√≥mico del trabajo remoto",
        "efectos del ejercicio en la salud mental"
    ]
    
    print("\nüîç Realizando b√∫squedas de prueba...")
    
    # Ejecutar y mostrar resultados de cada consulta
    for query in test_queries:
        print(f"\nüìù Buscando: '{query}'")
        print("-"*60)
        
        try:
            results = search.search(query, max_results=2)
            
            for i, result in enumerate(results, 1):
                print(f"\n{i}. {result.title}")
                print(f"   üì∞ Fuente: {result.source}")
                print(f"   ‚≠ê Score: {result.score:.2f}")
                print(f"   üìù Contenido: {result.content[:150]}...")
                print(f"   üîó URL: {result.url}")
                
        except SearchError as e:
            print(f"‚ùå Error: {e}")
            break
    
    print("\n" + "="*60)
    
# Punto de entrada para ejecuci√≥n directa del m√≥dulo
if __name__ == "__main__":
    test_search_system()
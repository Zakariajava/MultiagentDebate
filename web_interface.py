"""
Sistema de Interfaz Web para Debates Aut√≥nomos con Inteligencia Artificial.

Este m√≥dulo implementa una interfaz web interactiva utilizando Streamlit que permite
a los usuarios configurar y ejecutar debates automatizados entre equipos de agentes
de IA especializados. La aplicaci√≥n sigue el patr√≥n MVC (Model-View-Controller) donde
Streamlit act√∫a como la vista, las funciones como controladores, y el sistema de
debates como el modelo.

Arquitectura del Sistema:
    - Frontend: Streamlit (Reactive Web Framework)
    - Backend: Sistema de debates con LangGraph
    - Patr√≥n: Observer (Streamlit state management)
    - Persistencia: Session State (temporal)

Caracter√≠sticas Principales:
    - Configuraci√≥n din√°mica de debates mediante formularios reactivos
    - Visualizaci√≥n en tiempo real del progreso de debates
    - Exportaci√≥n de resultados en m√∫ltiples formatos
    - Gesti√≥n de estado persistente durante la sesi√≥n
    - Interfaz responsive con dise√±o modular

Referencias T√©cnicas:
    - PEP 484: Type Hints para mejor documentaci√≥n de API
    - Clean Architecture: Separaci√≥n de responsabilidades
    - SOLID Principles: Single Responsibility aplicado a funciones
    - Observer Pattern: Para manejo de estado reactivo

Author: Sistema de Debates IA
Version: 1.0
License: Academic Use
"""

import streamlit as st
import sys
import os
import time
from datetime import datetime
from typing import Dict, List, Any, Optional, Union, Tuple
import json

# Configuraci√≥n del path del proyecto para importaciones relativas
# Aplicando principio DRY (Don't Repeat Yourself) para path management
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importaciones del sistema de debates - Dependency Injection Pattern
from src.agents.debate_graph import DebateOrchestrator, DebateConfig
from src.config import Config
from system_validator import SystemValidator

# Configuraci√≥n inicial de Streamlit - Front Controller Pattern
# Establece las propiedades globales de la aplicaci√≥n web
st.set_page_config(
    page_title="üé≠ Sistema de Debates con IA",  # SEO optimized title
    page_icon="üéØ",                             # Browser tab icon
    layout="wide",                              # Responsive layout choice
    initial_sidebar_state="expanded"            # UX optimization
)

# Definici√≥n de estilos CSS personalizados - Separation of Concerns
# Implementa el principio de separaci√≥n entre presentaci√≥n y l√≥gica
st.markdown("""
<style>
    /* Tarjeta principal del debate - Gradient design para engagement visual */
    .debate-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin: 10px 0;
    }
    
    /* Estilo para argumentos PRO - Color psychology: azul = confianza */
    .pro-argument {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 15px;
        border-radius: 8px;
        border-left: 5px solid #00ff00;  /* Indicador visual de posici√≥n */
        margin: 10px 0;
    }
    
    /* Estilo para argumentos CONTRA - Color psychology: rosa/naranja = energ√≠a */
    .contra-argument {
        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        padding: 15px;
        border-radius: 8px;
        border-left: 5px solid #ff0000;  /* Indicador visual de oposici√≥n */
        margin: 10px 0;
    }
    
    /* Personalizaci√≥n de barra de progreso de Streamlit */
    .stProgress .st-bo {
        background-color: #667eea;
    }
    
    /* Tarjetas de m√©tricas - Material Design inspiration */
    .metric-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)


def initialize_session_state() -> None:
    """
    Inicializa el estado de sesi√≥n de Streamlit con valores por defecto.
    
    Implementa el patr√≥n Singleton para el estado de la aplicaci√≥n, asegurando
    que cada variable de estado se inicialice una sola vez por sesi√≥n de usuario.
    
    Estado Gestionado:
        - debate_running (bool): Flag de ejecuci√≥n de debate activo
        - debate_result (Optional[Dict]): Resultados del √∫ltimo debate ejecutado
        - debate_history (List[Dict]): Historial de debates de la sesi√≥n
        - current_debate_id (Optional[str]): Identificador √∫nico del debate actual
    
    Design Pattern:
        Lazy Initialization - Los valores solo se establecen si no existen
        
    Complexity:
        Tiempo: O(1) - Operaciones de verificaci√≥n y asignaci√≥n constantes
        Espacio: O(1) - Almacenamiento de referencias de estado
        
    Side Effects:
        Modifica st.session_state (estado global de Streamlit)
    """
    # Patr√≥n de inicializaci√≥n condicional para evitar sobrescritura
    if 'debate_running' not in st.session_state:
        st.session_state.debate_running = False
    
    if 'debate_result' not in st.session_state:
        st.session_state.debate_result = None
    
    if 'debate_history' not in st.session_state:
        st.session_state.debate_history = []
    
    if 'current_debate_id' not in st.session_state:
        st.session_state.current_debate_id = None


def validate_system() -> bool:
    """
    Valida la configuraci√≥n del sistema antes de permitir debates.
    
    Implementa el patr√≥n Fail-Fast para detectar errores de configuraci√≥n
    temprano en el ciclo de vida de la aplicaci√≥n, siguiendo principios
    de programaci√≥n defensiva.
    
    Returns:
        bool: True si el sistema est√° correctamente configurado
        
    Raises:
        SystemExit: Termina la aplicaci√≥n si la validaci√≥n falla
        
    Design Patterns:
        - Fail-Fast: Detecci√≥n temprana de errores
        - Guard Clause: Validaci√≥n de precondiciones
        
    Error Handling:
        Utiliza Streamlit's error display y st.stop() para control de flujo
        
    Side Effects:
        - Puede mostrar mensajes de error en la UI
        - Puede terminar la ejecuci√≥n de la aplicaci√≥n
    """
    # Instanciaci√≥n del validador - Dependency Injection
    validator = SystemValidator()
    
    # Validaci√≥n r√°pida del sistema con manejo de excepciones
    try:
        # Asegurar que la configuraci√≥n est√© cargada
        Config.ensure_loaded()
        return True
    except Exception as e:
        # Error handling con feedback inmediato al usuario
        st.error(f"‚ùå Error en configuraci√≥n: {e}")
        st.stop()  # Fail-fast: detener ejecuci√≥n si el sistema no est√° listo


def sidebar_configuration() -> Dict[str, Union[str, int]]:
    """
    Genera la configuraci√≥n del debate mediante la barra lateral interactiva.
    
    Implementa el patr√≥n Strategy para diferentes tipos de configuraci√≥n de debates,
    permitiendo tanto temas predefinidos como configuraci√≥n personalizada. Utiliza
    el patr√≥n Template Method para la estructura de configuraci√≥n.
    
    Returns:
        Dict[str, Union[str, int]]: Diccionario con la configuraci√≥n del debate
            - topic (str): Tema del debate
            - pro_position (str): Posici√≥n del equipo PRO
            - contra_position (str): Posici√≥n del equipo CONTRA
            - max_rounds (int): N√∫mero m√°ximo de rondas
            - timeout_minutes (int): Tiempo l√≠mite en minutos
    
    UI/UX Design:
        - Progressive Disclosure: Configuraci√≥n avanzada colapsada
        - Smart Defaults: Valores predeterminados basados en mejores pr√°cticas
        - Immediate Feedback: Visualizaci√≥n del estado del sistema
        
    Complexity:
        Tiempo: O(1) - Operaciones de UI constantes
        Espacio: O(1) - Almacenamiento de configuraci√≥n constante
    """
    # Header de la barra lateral con dise√±o de informaci√≥n jer√°rquica
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n del Debate")
    
    # Definici√≥n de temas predefinidos - Strategy Pattern
    # Cada tema implementa una estrategia espec√≠fica de debate
    predefined_topics: Dict[str, Dict[str, str]] = {
        "Personalizado": {"topic": "", "pro": "", "contra": ""},
        "Inteligencia Artificial": {
            "topic": "Impacto de la IA en el empleo",
            "pro": "La IA crear√° m√°s empleos de los que destruir√°",
            "contra": "La IA causar√° desempleo masivo y desigualdad"
        },
        "Trabajo Remoto": {
            "topic": "Futuro del trabajo remoto",
            "pro": "El trabajo remoto es m√°s productivo y beneficioso",
            "contra": "El trabajo presencial es esencial para la colaboraci√≥n"
        },
        "Energ√≠a": {
            "topic": "Transici√≥n energ√©tica",
            "pro": "Las energ√≠as renovables son viables econ√≥micamente",
            "contra": "Los combustibles f√≥siles siguen siendo necesarios"
        },
        "Educaci√≥n": {
            "topic": "Educaci√≥n online vs presencial",
            "pro": "La educaci√≥n online es m√°s accesible y efectiva",
            "contra": "La educaci√≥n presencial ofrece mejor desarrollo integral"
        }
    }
    
    # Selector de tema con patr√≥n de selecci√≥n estrat√©gica
    selected_topic = st.sidebar.selectbox(
        "üéØ Tema del debate:",
        list(predefined_topics.keys())
    )
    
    # L√≥gica condicional para configuraci√≥n personalizada vs predefinida
    # Aplicaci√≥n del principio Open/Closed - abierto para extensi√≥n
    if selected_topic == "Personalizado":
        # Configuraci√≥n manual - m√°xima flexibilidad
        topic = st.sidebar.text_input("üìù Tema del debate:")
        pro_position = st.sidebar.text_area("üü¢ Posici√≥n PRO:")
        contra_position = st.sidebar.text_area("üî¥ Posici√≥n CONTRA:")
    else:
        # Configuraci√≥n basada en plantilla - eficiencia y consistencia
        topic_data = predefined_topics[selected_topic]
        topic = st.sidebar.text_input("üìù Tema del debate:", value=topic_data["topic"])
        pro_position = st.sidebar.text_area("üü¢ Posici√≥n PRO:", value=topic_data["pro"])
        contra_position = st.sidebar.text_area("üî¥ Posici√≥n CONTRA:", value=topic_data["contra"])
    
    # Configuraci√≥n avanzada - Progressive Disclosure Pattern
    st.sidebar.subheader("üîß Configuraci√≥n Avanzada")
    
    # Controles deslizantes con rangos basados en investigaci√≥n emp√≠rica
    max_rounds = st.sidebar.slider("üîÑ N√∫mero de rondas:", 1, 5, 3)
    timeout_minutes = st.sidebar.slider("‚è±Ô∏è Timeout (minutos):", 5, 30, 15)
    
    # Informaci√≥n del estado del sistema - Transparency Principle
    st.sidebar.subheader("üìä Estado del Sistema")
    st.sidebar.info(f"""
    **Configuraci√≥n actual:**
    - Agentes por equipo: {Config.AGENTS_PER_TEAM()}
    - Fragmentos por agente: {Config.MAX_FRAGMENTS_PER_AGENT}
    - Queries por agente: {Config.MAX_QUERIES_PER_AGENT}
    - Debug mode: {Config.DEBUG_MODE()}
    """)
    
    # Retorno de configuraci√≥n estructurada - Data Transfer Object Pattern
    return {
        "topic": topic,
        "pro_position": pro_position,
        "contra_position": contra_position,
        "max_rounds": max_rounds,
        "timeout_minutes": timeout_minutes
    }


def display_main_header() -> None:
    """
    Renderiza el header principal de la aplicaci√≥n con dise√±o branded.
    
    Implementa principios de Visual Hierarchy y Brand Identity para crear
    una primera impresi√≥n profesional. Utiliza HTML embebido para mayor
    control sobre el dise√±o visual.
    
    Design Principles:
        - Visual Hierarchy: T√≠tulo prominente seguido de descripci√≥n
        - Brand Consistency: Uso de emojis y colores corporativos
        - Accessibility: Contraste adecuado y estructura sem√°ntica
        
    Side Effects:
        Renderiza contenido HTML en la interfaz de Streamlit
    """
    # Renderizado de header con HTML personalizado - Template Pattern
    st.markdown("""
    <div class="debate-card">
        <h1>üé≠ Sistema de Debates con IA</h1>
        <p>Dos equipos de IA investigan y debaten sobre cualquier tema usando evidencia real</p>
    </div>
    """, unsafe_allow_html=True)


def validate_debate_config(config: Dict[str, Union[str, int]]) -> List[str]:
    """
    Valida la configuraci√≥n del debate aplicando reglas de negocio.
    
    Implementa el patr√≥n Specification para validaci√≥n de reglas de negocio,
    asegurando que la configuraci√≥n cumpla con los requisitos m√≠nimos para
    un debate efectivo.
    
    Args:
        config (Dict[str, Union[str, int]]): Configuraci√≥n del debate a validar
            Estructura esperada:
            - topic (str): Tema del debate
            - pro_position (str): Posici√≥n PRO
            - contra_position (str): Posici√≥n CONTRA
            - max_rounds (int): N√∫mero de rondas
            - timeout_minutes (int): Timeout en minutos
    
    Returns:
        List[str]: Lista de errores de validaci√≥n. Lista vac√≠a si es v√°lida.
        
    Validation Rules:
        - Tema: M√≠nimo 10 caracteres (suficiente contexto)
        - Posici√≥n PRO: M√≠nimo 20 caracteres (argumento substantivo)
        - Posici√≥n CONTRA: M√≠nimo 20 caracteres (argumento substantivo)
        
    Design Pattern:
        Specification Pattern - Cada regla es una especificaci√≥n independiente
        
    Complexity:
        Tiempo: O(n) donde n es el n√∫mero de campos a validar
        Espacio: O(e) donde e es el n√∫mero de errores encontrados
    """
    # Lista de errores - Collector Pattern
    errors: List[str] = []
    
    # Validaci√≥n del tema - Business Rule: Contexto suficiente
    if not config["topic"] or len(config["topic"].strip()) < 10:
        errors.append("El tema debe tener al menos 10 caracteres")
    
    # Validaci√≥n de posici√≥n PRO - Business Rule: Argumento substantivo
    if not config["pro_position"] or len(config["pro_position"].strip()) < 20:
        errors.append("La posici√≥n PRO debe tener al menos 20 caracteres")
    
    # Validaci√≥n de posici√≥n CONTRA - Business Rule: Contra-argumento substantivo
    if not config["contra_position"] or len(config["contra_position"].strip()) < 20:
        errors.append("La posici√≥n CONTRA debe tener al menos 20 caracteres")
    
    return errors


def create_debate_preview(config: Dict[str, Union[str, int]]) -> None:
    """
    Genera una vista previa visual del debate configurado.
    
    Implementa el patr√≥n Preview para permitir a los usuarios revisar
    su configuraci√≥n antes de la ejecuci√≥n. Utiliza dise√±o de dos columnas
    para mostrar la naturaleza adversarial del debate.
    
    Args:
        config (Dict[str, Union[str, int]]): Configuraci√≥n del debate
        
    UI/UX Design:
        - Split Layout: Visualizaci√≥n clara de posiciones opuestas
        - Color Coding: Verde para PRO, Rojo para CONTRA
        - Information Architecture: Jerarqu√≠a clara de informaci√≥n
        
    Visual Psychology:
        - Simetr√≠a para balance visual
        - Colores contrastantes para distinci√≥n clara
        - Tipograf√≠a jer√°rquica para escaneabilidad
        
    Side Effects:
        Renderiza contenido HTML y Markdown en Streamlit
    """
    # Layout en dos columnas para representar la naturaleza dual del debate
    col1, col2 = st.columns(2)
    
    # Columna izquierda - Equipo PRO (color psychology: verde = positivo)
    with col1:
        st.markdown(f"""
        <div class="pro-argument">
            <h4>üü¢ Equipo PRO</h4>
            <p><strong>Posici√≥n:</strong> {config['pro_position']}</p>
            <small>Defender√° esta posici√≥n con evidencia cient√≠fica, econ√≥mica, hist√≥rica, psicol√≥gica y an√°lisis cr√≠tico</small>
        </div>
        """, unsafe_allow_html=True)
    
    # Columna derecha - Equipo CONTRA (color psychology: rojo = oposici√≥n)
    with col2:
        st.markdown(f"""
        <div class="contra-argument">
            <h4>üî¥ Equipo CONTRA</h4>
            <p><strong>Posici√≥n:</strong> {config['contra_position']}</p>
            <small>Refutar√° la posici√≥n PRO con evidencia especializada y contraargumentos</small>
        </div>
        """, unsafe_allow_html=True)
    
    # Resumen de configuraci√≥n - Information Summary Pattern
    st.markdown(f"""
    **üìã Configuraci√≥n del debate:**
    - **Tema:** {config['topic']}
    - **Rondas:** {config['max_rounds']}
    - **Timeout:** {config['timeout_minutes']} minutos
    - **Agentes por equipo:** 5 (Cient√≠fico, Econ√≥mico, Hist√≥rico, Refutador, Psicol√≥gico)
    """)


def run_debate_with_progress(config: Dict[str, Union[str, int]]) -> Optional[Dict[str, Any]]:
    """
    Ejecuta el debate con visualizaci√≥n de progreso en tiempo real.
    
    Implementa el patr√≥n Observer para mostrar el progreso del debate,
    proporcionando feedback continuo al usuario sobre el estado de la
    ejecuci√≥n. Utiliza contenedores de Streamlit para organizaci√≥n modular.
    
    Args:
        config (Dict[str, Union[str, int]]): Configuraci√≥n del debate validada
        
    Returns:
        Optional[Dict[str, Any]]: Estado final del debate o None si falla
        
    Design Patterns:
        - Observer: Para actualizaci√≥n de progreso en tiempo real
        - Template Method: Estructura fija con pasos variables
        - Facade: Simplifica la interacci√≥n con el sistema de debates
        
    UI/UX Features:
        - Progress Bar: Feedback visual del progreso
        - Real-time Metrics: Actualizaci√≥n din√°mica de estad√≠sticas
        - Status Updates: Mensajes descriptivos del estado actual
        
    Error Handling:
        Captura y maneja excepciones del sistema de debates,
        proporcionando feedback apropiado al usuario
        
    Performance Considerations:
        - Actualizaci√≥n eficiente de m√©tricas
        - Rendering optimizado de componentes UI
        
    Complexity:
        Tiempo: O(n) donde n es la duraci√≥n del debate
        Espacio: O(1) para UI components, O(m) para resultados del debate
    """
    # Creaci√≥n de contenedores modulares - Composite Pattern
    progress_container = st.container()
    status_container = st.container()
    live_debate_container = st.container()
    
    # Configuraci√≥n de la interfaz de progreso
    with progress_container:
        st.subheader("üöÄ Ejecutando Debate")
        progress_bar = st.progress(0)  # Inicializaci√≥n de barra de progreso
        status_text = st.empty()       # Placeholder para texto de estado
        
        # M√©tricas en tiempo real - Dashboard Pattern
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            fragments_metric = st.empty()   # M√©trica de evidencia
        with col2:
            arguments_metric = st.empty()   # M√©trica de argumentos
        with col3:
            round_metric = st.empty()       # M√©trica de rondas
        with col4:
            confidence_metric = st.empty()  # M√©trica de confianza
    
    try:
        # Transformaci√≥n de configuraci√≥n UI a configuraci√≥n de dominio
        # Data Transfer Object Pattern
        debate_config = DebateConfig(
            topic=config["topic"],
            pro_position=config["pro_position"],
            contra_position=config["contra_position"],
            max_rounds=config["max_rounds"],
            timeout_minutes=config["timeout_minutes"]
        )
        
        # Inicializaci√≥n del orquestador - Factory Pattern
        with status_container:
            st.info("üèóÔ∏è Inicializando sistema de debates...")
        
        orchestrator = DebateOrchestrator()
        
        # Actualizaci√≥n de progreso - Observer Pattern
        progress_bar.progress(10)
        status_text.text("‚úÖ Orquestador creado")
        
        # Simulaci√≥n de progreso visual para mejor UX
        status_text.text("üîç Equipos investigando evidencia...")
        progress_bar.progress(30)
        
        # Ejecuci√≥n del debate - Command Pattern
        start_time = time.time()
        final_state = orchestrator.run_debate(debate_config)
        end_time = time.time()
        
        # Actualizaci√≥n de m√©tricas basadas en resultados - Data Binding
        if final_state:
            # Extracci√≥n de m√©tricas del estado final
            pro_args = len(final_state.get('pro_arguments', []))
            contra_args = len(final_state.get('contra_arguments', []))
            pro_frags = len(final_state.get('pro_fragments', []))
            contra_frags = len(final_state.get('contra_fragments', []))
            current_round = final_state.get('current_round', 0)
            
            # Actualizaci√≥n reactiva de m√©tricas - Observer Pattern
            with fragments_metric:
                st.metric("üìä Evidencia", f"{pro_frags + contra_frags}", "fragmentos")
            
            with arguments_metric:
                st.metric("üí¨ Argumentos", f"{pro_args + contra_args}", "generados")
            
            with round_metric:
                st.metric("üîÑ Ronda", f"{current_round}/{config['max_rounds']}")
            
            # C√°lculo y visualizaci√≥n de confianza promedio
            if final_state.get('final_scores'):
                pro_conf = final_state['final_scores'].get('pro_average', 0)
                contra_conf = final_state['final_scores'].get('contra_average', 0)
                avg_conf = (pro_conf + contra_conf) / 2
                with confidence_metric:
                    st.metric("‚≠ê Confianza", f"{avg_conf:.2f}", "promedio")
        
        # Finalizaci√≥n de progreso con feedback de completitud
        progress_bar.progress(100)
        status_text.text(f"‚úÖ Debate completado en {end_time - start_time:.1f} segundos")
        
        return final_state
        
    except Exception as e:
        # Error handling con feedback inmediato al usuario
        st.error(f"‚ùå Error ejecutando debate: {e}")
        return None


def display_live_debate(state: Optional[Dict[str, Any]]) -> None:
    """
    Visualiza la conversaci√≥n del debate en formato interactivo.
    
    Implementa el patr√≥n Presentation Model para mostrar los argumentos
    del debate de manera estructurada y visualmente atractiva. Utiliza
    dise√±o responsivo y expandible para manejar contenido variable.
    
    Args:
        state (Optional[Dict[str, Any]]): Estado del debate con argumentos
            Estructura esperada:
            - pro_arguments (List[Dict]): Lista de argumentos PRO
            - contra_arguments (List[Dict]): Lista de argumentos CONTRA
            
    Design Patterns:
        - Template Method: Estructura consistente para cada argumento
        - Composite: Organizaci√≥n jer√°rquica de argumentos por ronda
        - Strategy: Diferentes estilos visuales por equipo
        
    UI/UX Features:
        - Round-based Organization: Agrupaci√≥n l√≥gica por ronda
        - Expandable Content: Puntos clave colapsables
        - Visual Distinction: Colores y estilos √∫nicos por equipo
        - Confidence Indicators: Visualizaci√≥n de certeza
        
    Accessibility:
        - Semantic HTML structure
        - Color contrast compliance
        - Keyboard navigation support
        
    Performance:
        - Lazy rendering de contenido expandible
        - Efficient DOM updates
        
    Side Effects:
        Renderiza contenido HTML, Markdown y widgets de Streamlit
    """
    # Guard clause para estado inv√°lido - Defensive Programming
    if not state:
        return
    
    st.subheader("üí¨ Conversaci√≥n del Debate")
    
    # Extracci√≥n de argumentos con valores por defecto - Null Object Pattern
    pro_arguments = state.get('pro_arguments', [])
    contra_arguments = state.get('contra_arguments', [])
    
    # Validaci√≥n de contenido con feedback apropiado
    if not pro_arguments and not contra_arguments:
        st.warning("‚ö†Ô∏è No se generaron argumentos en el debate")
        return
    
    # C√°lculo del n√∫mero m√°ximo de rondas para iteraci√≥n
    max_rounds = max(len(pro_arguments), len(contra_arguments))
    
    # Iteraci√≥n por ronda - Template Method Pattern
    for round_num in range(max_rounds):
        st.markdown(f"### üî• Ronda {round_num + 1}")
        
        # Layout de dos columnas para debate adversarial
        col1, col2 = st.columns(2)
        
        # Renderizado de argumento PRO - Strategy Pattern
        if round_num < len(pro_arguments):
            pro_arg = pro_arguments[round_num]
            with col1:
                # Extracci√≥n de metadatos con valores por defecto
                confidence = pro_arg.get('confidence_score', 0)
                strategy = pro_arg.get('strategy', 'unknown')
                
                # Renderizado de argumento con dise√±o branded
                st.markdown(f"""
                <div class="pro-argument">
                    <h4>üü¢ Supervisor PRO (Confianza: {confidence:.2f})</h4>
                    <p><strong>Estrategia:</strong> {strategy.upper()}</p>
                    <p>{pro_arg.get('content', 'Sin contenido')}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Puntos clave expandibles - Progressive Disclosure
                if pro_arg.get('key_points'):
                    with st.expander(f"üîë Puntos clave PRO - Ronda {round_num + 1}"):
                        for i, point in enumerate(pro_arg['key_points'], 1):
                            st.write(f"{i}. {point}")
        
        # Renderizado de argumento CONTRA - Strategy Pattern (variante)
        if round_num < len(contra_arguments):
            contra_arg = contra_arguments[round_num]
            with col2:
                # Extracci√≥n de metadatos con valores por defecto
                confidence = contra_arg.get('confidence_score', 0)
                strategy = contra_arg.get('strategy', 'unknown')
                
                # Renderizado de argumento con dise√±o alternativo
                st.markdown(f"""
                <div class="contra-argument">
                    <h4>üî¥ Supervisor CONTRA (Confianza: {confidence:.2f})</h4>
                    <p><strong>Estrategia:</strong> {strategy.upper()}</p>
                    <p>{contra_arg.get('content', 'Sin contenido')}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Puntos clave expandibles - Progressive Disclosure
                if contra_arg.get('key_points'):
                    with st.expander(f"üîë Puntos clave CONTRA - Ronda {round_num + 1}"):
                        for i, point in enumerate(contra_arg['key_points'], 1):
                            st.write(f"{i}. {point}")
        
        # Separador visual entre rondas (excepto la √∫ltima)
        if round_num < max_rounds - 1:
            st.markdown("---")


def display_results(state: Optional[Dict[str, Any]]) -> None:
    """
    Presenta los resultados finales del debate con an√°lisis completo.
    
    Implementa el patr√≥n Report Generator para crear un resumen comprehensivo
    de los resultados del debate, incluyendo ganador, m√©tricas, evidencia
    y an√°lisis estad√≠stico.
    
    Args:
        state (Optional[Dict[str, Any]]): Estado final del debate
            Estructura esperada:
            - winner (str): Ganador del debate
            - final_scores (Dict): Puntuaciones finales
            - debate_summary (str): Resumen ejecutivo
            - pro_fragments/contra_fragments (List): Evidencia utilizada
            
    Design Patterns:
        - Report Generator: Creaci√≥n estructurada de informes
        - Template Method: Estructura consistente de resultados
        - Data Visualization: Representaci√≥n clara de m√©tricas
        
    Analytics Features:
        - Winner Determination: An√°lisis autom√°tico de ganador
        - Score Analysis: M√©tricas detalladas de rendimiento
        - Evidence Summary: Resumen de fuentes utilizadas
        - Margin Analysis: An√°lisis de cercan√≠a del debate
        
    UI/UX Design:
        - Information Hierarchy: Organizaci√≥n l√≥gica de informaci√≥n
        - Visual Emphasis: Destacado del ganador
        - Metric Cards: Presentaci√≥n clara de estad√≠sticas
        - Evidence Browser: Exploraci√≥n de fuentes
        
    Business Intelligence:
        - Performance metrics calculation
        - Competitive analysis
        - Quality assessment
        
    Side Effects:
        Renderiza m√∫ltiples componentes UI de Streamlit con datos
    """
    # Guard clause para estado inv√°lido - Defensive Programming
    if not state:
        return
    
    st.subheader("üèÜ Resultados Finales")
    
    # Extracci√≥n y normalizaci√≥n del ganador - Null Object Pattern
    winner = state.get('winner', 'No determinado')
    if winner is None:
        winner = 'No determinado'
    
    # Visualizaci√≥n del ganador con c√≥digos de color sem√°nticos
    # Color Psychology: Verde=√©xito, Rojo=competencia, Azul=neutralidad
    if winner == 'pro':
        st.success(f"üèÜ **GANADOR: EQUIPO PRO**")
    elif winner == 'contra':
        st.error(f"üèÜ **GANADOR: EQUIPO CONTRA**")
    elif winner == 'empate':
        st.info(f"‚öñÔ∏è **RESULTADO: EMPATE**")
    else:
        st.warning(f"‚ùì **RESULTADO: {winner.upper()}**")
    
    # Dashboard de m√©tricas finales - Dashboard Pattern
    final_scores = state.get('final_scores', {})
    if final_scores:
        # Layout en cuatro columnas para m√©tricas balanceadas
        col1, col2, col3, col4 = st.columns(4)
        
        # M√©trica de puntuaci√≥n PRO
        with col1:
            st.metric(
                "üü¢ PRO Score", 
                f"{final_scores.get('pro_average', 0):.3f}",
                delta=None  # Sin delta comparativo
            )
        
        # M√©trica de puntuaci√≥n CONTRA
        with col2:
            st.metric(
                "üî¥ CONTRA Score", 
                f"{final_scores.get('contra_average', 0):.3f}",
                delta=None
            )
        
        # M√©trica de cantidad de argumentos PRO
        with col3:
            st.metric(
                "üìú Args PRO", 
                final_scores.get('pro_total_arguments', 0)
            )
        
        # M√©trica de cantidad de argumentos CONTRA
        with col4:
            st.metric(
                "üìú Args CONTRA", 
                final_scores.get('contra_total_arguments', 0)
            )
        
        # An√°lisis de margen de victoria - Business Intelligence
        pro_avg = final_scores.get('pro_average', 0)
        contra_avg = final_scores.get('contra_average', 0)
        margin = abs(pro_avg - contra_avg)
        
        # Clasificaci√≥n de cercan√≠a basada en umbrales emp√≠ricos
        if margin < 0.05:
            st.info("‚öñÔ∏è Debate muy re√±ido")
        elif margin < 0.15:
            st.info("üéØ Victoria por margen estrecho")
        else:
            st.info("üéØ Victoria clara")
    
    # Visualizaci√≥n del resumen ejecutivo - Document Viewer Pattern
    summary = state.get('debate_summary', '')
    if summary:
        st.subheader("üìã Resumen Ejecutivo")
        st.text_area("", value=summary, height=200, disabled=True)
    
    # Secci√≥n de evidencia utilizada - Evidence Browser Pattern
    st.subheader("üìä Evidencia Utilizada")
    
    # Layout dividido para evidencia comparativa
    col1, col2 = st.columns(2)
    
    # Evidencia del equipo PRO
    with col1:
        st.write("**üü¢ Evidencia PRO:**")
        pro_fragments = state.get('pro_fragments', [])
        if pro_fragments:
            # Mostrar las 5 mejores fuentes con truncamiento inteligente
            for i, frag in enumerate(pro_fragments[:5], 1):
                st.write(f"{i}. [{frag.get('source', 'N/A')}] {frag.get('title', 'Sin t√≠tulo')[:50]}...")
                st.caption(f"Score: {frag.get('final_score', 0):.2f}")
        else:
            st.write("No se encontr√≥ evidencia")
    
    # Evidencia del equipo CONTRA
    with col2:
        st.write("**üî¥ Evidencia CONTRA:**")
        contra_fragments = state.get('contra_fragments', [])
        if contra_fragments:
            # Mostrar las 5 mejores fuentes con truncamiento inteligente
            for i, frag in enumerate(contra_fragments[:5], 1):
                st.write(f"{i}. [{frag.get('source', 'N/A')}] {frag.get('title', 'Sin t√≠tulo')[:50]}...")
                st.caption(f"Score: {frag.get('final_score', 0):.2f}")
        else:
            st.write("No se encontr√≥ evidencia")


def export_debate_results(state: Optional[Dict[str, Any]], config: Dict[str, Union[str, int]]) -> None:
    """
    Proporciona funcionalidad de exportaci√≥n de resultados del debate.
    
    Implementa el patr√≥n Exporter para permitir m√∫ltiples formatos de
    exportaci√≥n de datos del debate. Utiliza serializaci√≥n JSON y
    formateo de texto para diferentes casos de uso.
    
    Args:
        state (Optional[Dict[str, Any]]): Estado final del debate
        config (Dict[str, Union[str, int]]): Configuraci√≥n original del debate
        
    Export Formats:
        - JSON: Datos estructurados para an√°lisis program√°tico
        - TXT: Resumen legible para documentaci√≥n
        
    Design Patterns:
        - Exporter: M√∫ltiples estrategias de exportaci√≥n
        - Serializer: Transformaci√≥n de datos a formatos externos
        - Template Method: Estructura consistente de exports
        
    Data Processing:
        - Deep object serialization para JSON
        - Text formatting para legibilidad humana
        - Timestamp generation para trazabilidad
        
    File Management:
        - Dynamic filename generation
        - MIME type specification
        - Encoding handling (UTF-8)
        
    Side Effects:
        Genera archivos descargables en la interfaz de Streamlit
    """
    # Guard clause para estado inv√°lido - Defensive Programming
    if not state:
        return
    
    st.subheader("üì§ Exportar Resultados")
    
    # Preparaci√≥n de estructura de datos para exportaci√≥n - DTO Pattern
    export_data: Dict[str, Any] = {
        "config": config,  # Configuraci√≥n original del debate
        "results": {
            "winner": state.get('winner'),
            "final_scores": state.get('final_scores'),
            "debate_summary": state.get('debate_summary'),
            "arguments": {
                "pro": state.get('pro_arguments', []),
                "contra": state.get('contra_arguments', [])
            },
            "evidence": {
                "pro_fragments": state.get('pro_fragments', []),
                "contra_fragments": state.get('contra_fragments', [])
            },
            "metadata": {
                "start_time": state.get('start_time'),
                "current_time": state.get('current_time'),
                "errors": state.get('errors', [])
            }
        }
    }
    
    # Serializaci√≥n JSON con configuraci√≥n optimizada
    json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
    
    # Layout de botones de descarga en dos columnas
    col1, col2 = st.columns(2)
    
    # Exportaci√≥n JSON - Formato estructurado para an√°lisis
    with col1:
        st.download_button(
            label="üì• Descargar como JSON",
            data=json_data,
            file_name=f"debate_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )
    
    # Exportaci√≥n TXT - Formato legible para documentaci√≥n
    with col2:
        # Generaci√≥n de resumen textual - Template Method
        text_summary = f"""
DEBATE: {config['topic']}
FECHA: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

POSICIONES:
PRO: {config['pro_position']}
CONTRA: {config['contra_position']}

GANADOR: {state.get('winner', 'No determinado')}

ARGUMENTOS PRO:
{chr(10).join([f"Ronda {i+1}: {arg.get('content', '')}" for i, arg in enumerate(state.get('pro_arguments', []))])}

ARGUMENTOS CONTRA:
{chr(10).join([f"Ronda {i+1}: {arg.get('content', '')}" for i, arg in enumerate(state.get('contra_arguments', []))])}
"""
        
        st.download_button(
            label="üìÑ Descargar como TXT",
            data=text_summary,
            file_name=f"debate_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )


def main() -> None:
    """
    Funci√≥n principal que orquesta el flujo completo de la aplicaci√≥n web.
    
    Implementa el patr√≥n Main Controller para coordinar todos los componentes
    de la aplicaci√≥n, manejando el flujo de control, validaci√≥n, ejecuci√≥n
    y visualizaci√≥n de resultados.
    
    Application Flow:
        1. Inicializaci√≥n del estado de sesi√≥n
        2. Validaci√≥n del sistema
        3. Configuraci√≥n del debate
        4. Validaci√≥n de configuraci√≥n
        5. Vista previa
        6. Ejecuci√≥n del debate
        7. Visualizaci√≥n de resultados
        8. Gesti√≥n de historial
        
    Design Patterns:
        - Main Controller: Coordinaci√≥n central de flujo
        - Pipeline: Procesamiento secuencial de pasos
        - State Machine: Gesti√≥n de estados de aplicaci√≥n
        
    Error Handling:
        - Fail-fast validation
        - Graceful degradation
        - User-friendly error messages
        
    Session Management:
        - Persistent state across interactions
        - History management
        - State transitions
        
    User Experience:
        - Progressive disclosure
        - Immediate feedback
        - Clear navigation flow
        
    Performance:
        - Lazy loading of components
        - Efficient state updates
        - Optimized rendering
        
    Side Effects:
        - Modifies session state
        - Renders UI components
        - Manages application lifecycle
    """
    # Inicializaci√≥n de la aplicaci√≥n - Bootstrap Pattern
    initialize_session_state()
    validate_system()
    
    # Renderizado del header principal - Branding
    display_main_header()
    
    # Configuraci√≥n del debate mediante sidebar - Configuration Pattern
    config = sidebar_configuration()
    
    # Validaci√≥n de configuraci√≥n con feedback inmediato - Fail-Fast
    config_errors = validate_debate_config(config)
    
    # Manejo de errores de configuraci√≥n - Guard Clause Pattern
    if config_errors:
        st.error("‚ùå Errores en la configuraci√≥n:")
        for error in config_errors:
            st.write(f"‚Ä¢ {error}")
        st.stop()  # Detener ejecuci√≥n hasta correcci√≥n
    
    # Vista previa del debate configurado - Preview Pattern
    st.subheader("üëÄ Vista Previa del Debate")
    create_debate_preview(config)
    
    # Bot√≥n de inicio de debate con layout centrado - Call-to-Action Pattern
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Bot√≥n principal con estilo prominente
        if st.button("üöÄ INICIAR DEBATE", type="primary", use_container_width=True):
            # Activaci√≥n de estado de ejecuci√≥n - State Transition
            st.session_state.debate_running = True
            st.session_state.current_debate_id = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Ejecuci√≥n condicional del debate - State-driven Execution
    if st.session_state.debate_running:
        # Contenedor de ejecuci√≥n con spinner para UX
        with st.spinner("üé≠ Equipos de IA debatiendo..."):
            result = run_debate_with_progress(config)
            
            # Procesamiento de resultados exitosos
            if result:
                # Persistencia en estado de sesi√≥n - Session Management
                st.session_state.debate_result = result
                st.session_state.debate_history.append({
                    "id": st.session_state.current_debate_id,
                    "config": config,
                    "result": result,
                    "timestamp": datetime.now()
                })
            
            # Transici√≥n de estado post-ejecuci√≥n
            st.session_state.debate_running = False
    
    # Visualizaci√≥n de resultados si est√°n disponibles - Conditional Rendering
    if st.session_state.debate_result:
        st.markdown("---")  # Separador visual
        
        # Interfaz de pesta√±as para organizaci√≥n de informaci√≥n - Tab Pattern
        tab1, tab2, tab3 = st.tabs(["üí¨ Debate", "üèÜ Resultados", "üì§ Exportar"])
        
        # Pesta√±a de conversaci√≥n del debate
        with tab1:
            display_live_debate(st.session_state.debate_result)
        
        # Pesta√±a de resultados y an√°lisis
        with tab2:
            display_results(st.session_state.debate_result)
        
        # Pesta√±a de exportaci√≥n de datos
        with tab3:
            export_debate_results(st.session_state.debate_result, config)
    
    # Gesti√≥n de historial de debates - History Management
    if st.session_state.debate_history:
        st.sidebar.markdown("---")
        st.sidebar.subheader("üìö Historial de Debates")
        
        # Mostrar √∫ltimos 5 debates con navegaci√≥n
        for debate in st.session_state.debate_history[-5:]:  # √öltimos 5
            # Bot√≥n de navegaci√≥n para cada debate hist√≥rico
            if st.sidebar.button(f"üìÑ {debate['config']['topic'][:30]}...", key=debate['id']):
                # Carga de debate hist√≥rico - State Loading
                st.session_state.debate_result = debate['result']
                st.rerun()  # Recarga de interfaz con nuevo estado


# Punto de entrada de la aplicaci√≥n - Entry Point Pattern
if __name__ == "__main__":
    """
    Punto de entrada principal de la aplicaci√≥n.
    
    Implementa el patr√≥n Entry Point est√°ndar de Python, asegurando
    que la aplicaci√≥n solo se ejecute cuando se invoca directamente
    y no durante importaciones.
    
    Execution Context:
        - Direct execution: Runs main application
        - Import context: No execution (module import only)
        
    Best Practices:
        - Standard Python idiom for executable modules
        - Clear separation of library vs application code
        - Proper encapsulation of main logic
    """
    main()